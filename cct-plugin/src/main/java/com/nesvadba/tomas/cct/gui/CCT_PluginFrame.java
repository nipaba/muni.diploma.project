/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nesvadba.tomas.cct.gui;

import java.awt.Rectangle;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import com.nesvadba.tomas.cct.Convertor;
import com.nesvadba.tomas.cct.domain.CCT;
import com.nesvadba.tomas.cct.domain.Point;
import com.nesvadba.tomas.cct.domain.ShapeTree;
import com.nesvadba.tomas.cct.enums.ComponentProperty;
import com.nesvadba.tomas.cct.enums.FilterProps;
import com.nesvadba.tomas.cct.generator.CCTGenerator;
import com.nesvadba.tomas.cct.generator.MaxTreeGenerator;
import com.nesvadba.tomas.cct.generator.MinTreeGenerator;
import com.nesvadba.tomas.cct.generator.ShapeTreeGenerator;

import ij.IJ;
import ij.ImagePlus;
import ij.gui.RoiListener;
import ij.plugin.frame.PlugInFrame;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 
 * @author Nesvadba Tomáš, učo 395902 - Diplomová práce
 *
 */
public class CCT_PluginFrame extends PlugInFrame {

    private static final long serialVersionUID = 1L;

    private ImagePlus image;
    private ImagePlus orig;
    private ImagePlus mask;

    private CCT maxTree, minTree, cct;
    private ShapeTree shapeTree;
    private final CCTGenerator maxTreeGenerator = new MaxTreeGenerator();
    private final CCTGenerator minTreeGenerator = new MinTreeGenerator();

    private SegComparator2 segComparator;

    private boolean keepOnlyOne = true;

    private Painter painter;
    private boolean ready = false;

    private Map<FilterProps, Integer> filterProperties = new HashMap<>();
    private Map<ComponentProperty, Boolean> selectedFilters = new HashMap<>();

    private SpinnerModels spinnerModels = new SpinnerModels();

    public CCT_PluginFrame() {

        super("CCT Frame");

        initComponents();

        spinnerModels.initSizeSM(minSizeSpinner, maxSizeSpinner, filterProperties);
        spinnerModels.initHeightSM(minHeightSpinner, maxHeightSpinner, filterProperties);
        spinnerModels.initIntensitytSM(minIntensitySpinner, maxIntensitySpinner, filterProperties);
        spinnerModels.initElongationSM(minEnlongSpinner, maxEnlongSpinner, filterProperties);
        spinnerModels.initRoundnesSM(minRoundSpinner, maxRoundSpinner, filterProperties);
        spinnerModels.initAvgIntSM(minAvgIntSpinner1, maxAvgIntSpinner, filterProperties);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filterGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        minSizeSpinner = new javax.swing.JSpinner();
        maxSizeSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        minHeightSpinner = new javax.swing.JSpinner();
        maxHeightSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        nodesCount = new javax.swing.JLabel();
        pixelsCount = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        maskTitleValue = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        progressBarDesc = new javax.swing.JLabel();
        initImgBtn = new javax.swing.JButton();
        titleLabel1 = new javax.swing.JLabel();
        maskTitle = new javax.swing.JLabel();
        sizeCheck = new javax.swing.JCheckBox();
        heightCheck = new javax.swing.JCheckBox();
        intensityCheck = new javax.swing.JCheckBox();
        maxIntensitySpinner = new javax.swing.JSpinner();
        minIntensitySpinner = new javax.swing.JSpinner();
        minEnlongSpinner = new javax.swing.JSpinner();
        elongationCheck = new javax.swing.JCheckBox();
        maxEnlongSpinner = new javax.swing.JSpinner();
        maxRoundSpinner = new javax.swing.JSpinner();
        minRoundSpinner = new javax.swing.JSpinner();
        roundCheck = new javax.swing.JCheckBox();
        radioMinTree = new javax.swing.JRadioButton();
        radioMaxTree = new javax.swing.JRadioButton();
        radioShapeThree = new javax.swing.JRadioButton();
        helpBtn = new javax.swing.JButton();
        keepOnlyOneCheckBox = new javax.swing.JCheckBox();
        minAvgIntSpinner1 = new javax.swing.JSpinner();
        maxAvgIntSpinner = new javax.swing.JSpinner();
        avgIntenzityCheck = new javax.swing.JCheckBox();
        openMaskBtn = new javax.swing.JButton();
        compareBtn = new javax.swing.JButton();
        imageTitle = new javax.swing.JLabel();
        imageTitleValue = new javax.swing.JLabel();
        exportJaccardBtn = new javax.swing.JButton();
        exportRegBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jaccardCoefVal = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        regCoefValue = new javax.swing.JLabel();

        setBackground(java.awt.Color.lightGray);
        setForeground(java.awt.Color.lightGray);
        setMinimumSize(new java.awt.Dimension(500, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleLabel.setText("Node count");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(titleLabel, gridBagConstraints);

        minSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minSizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(minSizeSpinner, gridBagConstraints);

        maxSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(maxSizeSpinner, gridBagConstraints);

        jLabel2.setText("Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel3, gridBagConstraints);

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(filterButton, gridBagConstraints);

        minHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minHeightSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(minHeightSpinner, gridBagConstraints);

        maxHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxHeightSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(maxHeightSpinner, gridBagConstraints);

        jLabel6.setText("FILTER");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel6, gridBagConstraints);

        nodesCount.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        add(nodesCount, gridBagConstraints);

        pixelsCount.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        add(pixelsCount, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Connected Component Tree");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        add(jLabel7, gridBagConstraints);

        maskTitleValue.setText("title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        add(maskTitleValue, gridBagConstraints);

        progressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(progressBar, gridBagConstraints);

        progressBarDesc.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.gridwidth = 4;
        add(progressBarDesc, gridBagConstraints);

        initImgBtn.setText("Orig img");
        initImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initImgBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(initImgBtn, gridBagConstraints);

        titleLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleLabel1.setText("Pixel Count");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(titleLabel1, gridBagConstraints);

        maskTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        maskTitle.setText("Mask");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(maskTitle, gridBagConstraints);

        sizeCheck.setText("Size");
        sizeCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(sizeCheck, gridBagConstraints);

        heightCheck.setText("Height");
        heightCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heightCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(heightCheck, gridBagConstraints);

        intensityCheck.setText("Intensity");
        intensityCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                intensityCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(intensityCheck, gridBagConstraints);

        maxIntensitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxIntensitySpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(maxIntensitySpinner, gridBagConstraints);

        minIntensitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minIntensitySpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(minIntensitySpinner, gridBagConstraints);

        minEnlongSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minEnlongSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(minEnlongSpinner, gridBagConstraints);

        elongationCheck.setText("Elongation");
        elongationCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                elongationCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(elongationCheck, gridBagConstraints);

        maxEnlongSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxEnlongSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(maxEnlongSpinner, gridBagConstraints);

        maxRoundSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxRoundSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(maxRoundSpinner, gridBagConstraints);

        minRoundSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minRoundSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(minRoundSpinner, gridBagConstraints);

        roundCheck.setText("Roundness");
        roundCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                roundCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(roundCheck, gridBagConstraints);

        filterGroup.add(radioMinTree);
        radioMinTree.setText("Min Tree");
        radioMinTree.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioMinTreeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(radioMinTree, gridBagConstraints);

        filterGroup.add(radioMaxTree);
        radioMaxTree.setSelected(true);
        radioMaxTree.setText("Max Tree");
        radioMaxTree.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioMaxTreeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(radioMaxTree, gridBagConstraints);

        filterGroup.add(radioShapeThree);
        radioShapeThree.setText("Shape Tree");
        radioShapeThree.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioShapeThreeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(radioShapeThree, gridBagConstraints);

        helpBtn.setText("Help");
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(helpBtn, gridBagConstraints);

        keepOnlyOneCheckBox.setText("Selection Only");
        keepOnlyOneCheckBox.setActionCommand("Single komponent");
        keepOnlyOneCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                keepOnlyOneCheckBoxStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(keepOnlyOneCheckBox, gridBagConstraints);

        minAvgIntSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minAvgIntSpinner1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(minAvgIntSpinner1, gridBagConstraints);

        maxAvgIntSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxAvgIntSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(maxAvgIntSpinner, gridBagConstraints);

        avgIntenzityCheck.setText("AVG intensity");
        avgIntenzityCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avgIntenzityCheckStateChanged(evt);
            }
        });
        avgIntenzityCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgIntenzityCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(avgIntenzityCheck, gridBagConstraints);

        openMaskBtn.setText("Open GT mask");
        openMaskBtn.setEnabled(false);
        openMaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMaskBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(openMaskBtn, gridBagConstraints);

        compareBtn.setText("Compare");
        compareBtn.setEnabled(false);
        compareBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(compareBtn, gridBagConstraints);

        imageTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        imageTitle.setText("Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(imageTitle, gridBagConstraints);

        imageTitleValue.setText("title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        add(imageTitleValue, gridBagConstraints);

        exportJaccardBtn.setText("Mask Jaccard");
        exportJaccardBtn.setEnabled(false);
        exportJaccardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportJaccardBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(exportJaccardBtn, gridBagConstraints);

        exportRegBtn.setText("Mask Acuracy");
        exportRegBtn.setEnabled(false);
        exportRegBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportRegBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(exportRegBtn, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Jaccard Coeficient(mask value)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel4, gridBagConstraints);

        jaccardCoefVal.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        add(jaccardCoefVal, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Acuracy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel8, gridBagConstraints);

        regCoefValue.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        add(regCoefValue, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        try {
            java.awt.Desktop.getDesktop().browse(new URI("https://github.com/nipaba/muni.diploma.project"));
        } catch (URISyntaxException | IOException ex) {
            IJ.showMessage("Error occured - cannot open page (https://github.com/nipaba/muni.diploma.project) with help");
        }
    }//GEN-LAST:event_helpBtnActionPerformed

    private void exportRegBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exportRegBtnActionPerformed
        StringBuilder str = segComparator.compareRegistration();
        saveAs(str);
    }// GEN-LAST:event_exportRegBtnActionPerformed

    private void exportJaccardBtnActionPerformed(java.awt.event.ActionEvent evt) {

        StringBuilder str = segComparator.compareJaccards();
        saveAs(str);
    }

    private void saveAs(StringBuilder str) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.setDialogTitle("Specify file to save");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            
            File fileToSave = fileChooser.getSelectedFile();
            if (!fileToSave.getName().endsWith(".csv")){
                fileToSave = new File(fileToSave.getAbsolutePath()+".csv");
            }
            
            try {
                PrintWriter writer = new PrintWriter(fileToSave, "UTF-8");
                writer.write(str.toString());
                writer.close();
            } catch (FileNotFoundException | UnsupportedEncodingException ex) {
               
            }
        }
    }

    private void compareBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_compareBtnActionPerformed

        DecimalFormat formatter = new DecimalFormat("#.###");
        formatter.setRoundingMode(RoundingMode.DOWN);

        if (keepOnlyOneCheckBox.isSelected()) {
            double val = segComparator.concreteJaccard(filterProperties, selectedFilters, radioMaxTree.isSelected(), radioMinTree.isSelected(), radioShapeThree.isSelected());
            jaccardCoefVal.setText(formatter.format(val * 100) + "%" + "(" + segComparator.getLabelFount() + ")");
            regCoefValue.setText("0");

        } else {
            double val = segComparator.concreteRegistration(filterProperties, selectedFilters, radioMaxTree.isSelected(), radioMinTree.isSelected(), radioShapeThree.isSelected());
            jaccardCoefVal.setText("0");
            regCoefValue.setText(formatter.format(val * 100) + "%");
        }
    }// GEN-LAST:event_compareBtnActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosed
        this.exitForm(evt);
    }// GEN-LAST:event_formWindowClosed

    private void openMaskBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openMaskBtnActionPerformed
        JFileChooser chooser = new JFileChooser();

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("CCT_PluginFrame : openMaskBtnActionPerformed := " + "" + chooser.getSelectedFile().getAbsolutePath());
            segComparator = new SegComparator2(chooser.getSelectedFile().getAbsolutePath(), minTree, maxTree, shapeTree);
            compareBtn.setEnabled(true);
            exportJaccardBtn.setEnabled(true);
            maskTitleValue.setText(chooser.getSelectedFile().getName());

            exportJaccardBtn.setEnabled(true);
            exportRegBtn.setEnabled(true);
            compareBtn.setEnabled(true);
        }

    }// GEN-LAST:event_openMaskBtnActionPerformed

    private void radioMinTreeStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_radioMinTreeStateChanged
        if (radioMinTree.isSelected() && ready) {
            cct = minTree;
            updatePanel(minTree);
            filterImage();
        }

    }// GEN-LAST:event_radioMinTreeStateChanged

    private void radioMaxTreeStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_radioMaxTreeStateChanged
        if (radioMaxTree.isSelected() && ready) {
            cct = maxTree;
            updatePanel(maxTree);
            filterImage();
        }

    }// GEN-LAST:event_radioMaxTreeStateChanged

    private void radioShapeThreeStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_radioShapeThreeStateChanged
        if (ready) {
            updatePanel(shapeTree.getNodeCount());
        }
    }// GEN-LAST:event_radioShapeThreeStateChanged

    private void elongationCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_elongationCheckStateChanged
        selectedFilters.put(ComponentProperty.ELONGATION, elongationCheck.isSelected());
    }// GEN-LAST:event_elongationCheckStateChanged

    private void avgIntenzityCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_avgIntenzityCheckStateChanged
        selectedFilters.put(ComponentProperty.AVG_INTENSITY, avgIntenzityCheck.isSelected());
    }// GEN-LAST:event_avgIntenzityCheckStateChanged

    private void avgIntenzityCheckActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_avgIntenzityCheckActionPerformed

    }// GEN-LAST:event_avgIntenzityCheckActionPerformed

    private void maxAvgIntSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxAvgIntSpinnerStateChanged
        int value = (int) spinnerModels.getMaxAvgIntSM().getValue();
        filterProperties.put(FilterProps.AVG_INT_MAX, value);
        filterImage();
    }// GEN-LAST:event_maxAvgIntSpinnerStateChanged

    private void minAvgIntSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minAvgIntSpinner1StateChanged
        int value = (int) spinnerModels.getMinAvgIntSM().getValue();
        filterProperties.put(FilterProps.AVG_INT_MIN, value);
        filterImage();
    }// GEN-LAST:event_minAvgIntSpinner1StateChanged

    private void intensityCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_intensityCheckStateChanged
        selectedFilters.put(ComponentProperty.INTENSITY, intensityCheck.isSelected());
    }// GEN-LAST:event_intensityCheckStateChanged

    private void minIntensitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minIntensitySpinnerStateChanged
        int value = (int) spinnerModels.getMinIntensitySM().getValue();
        filterProperties.put(FilterProps.INTENSITY_MIN, value);
        filterImage();
    }// GEN-LAST:event_minIntensitySpinnerStateChanged

    private void maxIntensitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxIntensitySpinnerStateChanged
        int value = (int) spinnerModels.getMaxIntensitySM().getValue();
        filterProperties.put(FilterProps.INTENSITY_MAX, value);
        filterImage();
    }// GEN-LAST:event_maxIntensitySpinnerStateChanged

    private void initImgBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_initImgBtnActionPerformed
        painter.reprintOrig();
    }// GEN-LAST:event_initImgBtnActionPerformed

    private void minEnlongSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minEnlongSpinnerStateChanged
        int value = (int) spinnerModels.getMinElongationSM().getValue();
        filterProperties.put(FilterProps.ELONGATION_MIN, value);
        filterImage();
    }// GEN-LAST:event_minEnlongSpinnerStateChanged

    private void maxEnlongSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxEnlongSpinnerStateChanged
        int value = (int) spinnerModels.getMaxElongationSM().getValue();
        filterProperties.put(FilterProps.ELONGATION_MAX, value);
        filterImage();
    }// GEN-LAST:event_maxEnlongSpinnerStateChanged

    private void minRoundSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minRoundSpinnerStateChanged
        int value = (int) spinnerModels.getMinRoundSM().getValue();
        filterProperties.put(FilterProps.ROUND_MIN, value);
        filterImage();
    }// GEN-LAST:event_minRoundSpinnerStateChanged

    private void maxRoundSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxRoundSpinnerStateChanged
        int value = (int) spinnerModels.getMaxRoundSM().getValue();
        filterProperties.put(FilterProps.ROUND_MAX, value);
        filterImage();
    }// GEN-LAST:event_maxRoundSpinnerStateChanged

    private void roundCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_roundCheckStateChanged
        selectedFilters.put(ComponentProperty.ROUND, roundCheck.isSelected());
    }// GEN-LAST:event_roundCheckStateChanged

    private void keepOnlyOneCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_keepOnlyOneCheckBoxStateChanged
        keepOnlyOne = keepOnlyOneCheckBox.isSelected();
    }// GEN-LAST:event_keepOnlyOneCheckBoxStateChanged

    private void sizeCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_sizeCheckStateChanged
        selectedFilters.put(ComponentProperty.SIZE, sizeCheck.isSelected());

    }// GEN-LAST:event_sizeCheckStateChanged

    private void heightCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_heightCheckStateChanged
        selectedFilters.put(ComponentProperty.G_HEIGHT, heightCheck.isSelected());
    }// GEN-LAST:event_heightCheckStateChanged

    private void maxHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxHeightSpinnerStateChanged
        int maxHeight = (int) spinnerModels.getMaxHeightSM().getValue();
        filterProperties.put(FilterProps.HEIGHT_MAX, maxHeight);
        filterImage();
    }// GEN-LAST:event_maxHeightSpinnerStateChanged

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
        this.hide();
    }// GEN-LAST:event_exitForm

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterButtonActionPerformed
        filterImage();

    }// GEN-LAST:event_filterButtonActionPerformed

    private void minSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minSizeSpinnerStateChanged
        int minSize = (int) spinnerModels.getMinSizeSM().getValue();
        filterProperties.put(FilterProps.SIZE_MIN, minSize);
        filterImage();

    }// GEN-LAST:event_minSizeSpinnerStateChanged

    private void maxSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxSizeSpinnerStateChanged
        int maxSize = (int) spinnerModels.getMaxSizeSM().getValue();
        filterProperties.put(FilterProps.SIZE_MAX, maxSize);
        filterImage();
    }// GEN-LAST:event_maxSizeSpinnerStateChanged

    private void minHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minHeightSpinnerStateChanged
        int minHeight = (int) spinnerModels.getMinHeightSM().getValue();
        filterProperties.put(FilterProps.HEIGHT_MIN, minHeight);
        filterImage();
    }// GEN-LAST:event_minHeightSpinnerStateChanged

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox avgIntenzityCheck;
    private javax.swing.JButton compareBtn;
    private javax.swing.JCheckBox elongationCheck;
    private javax.swing.JButton exportJaccardBtn;
    private javax.swing.JButton exportRegBtn;
    private javax.swing.JButton filterButton;
    private javax.swing.ButtonGroup filterGroup;
    private javax.swing.JCheckBox heightCheck;
    private javax.swing.JButton helpBtn;
    private javax.swing.JLabel imageTitle;
    private javax.swing.JLabel imageTitleValue;
    private javax.swing.JButton initImgBtn;
    private javax.swing.JCheckBox intensityCheck;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jaccardCoefVal;
    private javax.swing.JCheckBox keepOnlyOneCheckBox;
    private javax.swing.JLabel maskTitle;
    private javax.swing.JLabel maskTitleValue;
    private javax.swing.JSpinner maxAvgIntSpinner;
    private javax.swing.JSpinner maxEnlongSpinner;
    private javax.swing.JSpinner maxHeightSpinner;
    private javax.swing.JSpinner maxIntensitySpinner;
    private javax.swing.JSpinner maxRoundSpinner;
    private javax.swing.JSpinner maxSizeSpinner;
    private javax.swing.JSpinner minAvgIntSpinner1;
    private javax.swing.JSpinner minEnlongSpinner;
    private javax.swing.JSpinner minHeightSpinner;
    private javax.swing.JSpinner minIntensitySpinner;
    private javax.swing.JSpinner minRoundSpinner;
    private javax.swing.JSpinner minSizeSpinner;
    private javax.swing.JLabel nodesCount;
    private javax.swing.JButton openMaskBtn;
    private javax.swing.JLabel pixelsCount;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressBarDesc;
    private javax.swing.JRadioButton radioMaxTree;
    private javax.swing.JRadioButton radioMinTree;
    private javax.swing.JRadioButton radioShapeThree;
    private javax.swing.JLabel regCoefValue;
    private javax.swing.JCheckBox roundCheck;
    private javax.swing.JCheckBox sizeCheck;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel titleLabel1;
    // End of variables declaration//GEN-END:variables

    public void run(String arg) {
        // create a dialog with two numeric input fields
        this.show();
        proccess();
    }

    @SuppressWarnings("static-access")
    private void proccess() {
        image = IJ.getImage();
        image.getProcessor().convertToByteProcessor();

        image.getRoi().addRoiListener(new RoiListener() {

            @Override
            public void roiModified(ImagePlus imp, int id) {
                if (id == RoiListener.MODIFIED || id == RoiListener.MOVED) {

                    if (image.getRoi() == null) {
                        return;
                    }

                    Rectangle bounds = image.getRoi().getBounds();

                    searchFor(bounds.getMinX(), bounds.getMinY(), bounds.getMaxX(), bounds.getMaxY());
                } else if (id == RoiListener.DELETED) {
                    selectedFilters.put(ComponentProperty.LEFT, false);
                    selectedFilters.put(ComponentProperty.RIGHT, false);
                    selectedFilters.put(ComponentProperty.TOP, false);
                    selectedFilters.put(ComponentProperty.BOTTOM, false);
                }

            }

        });

        orig = image.duplicate();
        imageTitleValue.setText(image.getTitle());

        Point[][] imgPoints = Convertor.initPoints(image);

        // RUN CCT
        // Max Tree
        progressBarDesc.setText("Creating : Connected component tree - Max Tree");
        progressBar.setValue(0);
        maxTree = maxTreeGenerator.createCCT(imgPoints);
        updatePanel(maxTree);

        // Min Tree
        progressBarDesc.setText("Creating : Connected component tree - Min Tree");
        progressBar.setValue(25);
        Convertor.reinitStaturs(imgPoints);
        minTree = minTreeGenerator.createCCT(imgPoints);
        updatePanel(minTree);

        // Shape Three
        progressBarDesc.setText("Creating : Connected component tree - Shape Tree");
        progressBar.setValue(50);
        List<CCT> ccts = new ArrayList<>();
        ccts.add(maxTree);
        ccts.add(minTree);
        shapeTree = ShapeTreeGenerator.createShapeTree(ccts);
        updatePanel(shapeTree.getNodeCount());
        progressBarDesc.setText("Finish");
        progressBar.setValue(100);

        image.setProcessor(image.getProcessor().convertToRGB());

        painter = new Painter(image, orig, mask, filterProperties, selectedFilters);

        // default cct
        cct = maxTree;
        radioMaxTree.setSelected(true);
        keepOnlyOne = keepOnlyOneCheckBox.isSelected();

        ready = true;
        openMaskBtn.setEnabled(true);
        updatePanel(maxTree);

    }

    private void updatePanel(int nodeCount) {
        nodesCount.setText(nodeCount + "");

    }

    private void updatePanel(CCT updateCCT) {
        nodesCount.setText(updateCCT.getNodeCount() + "");
        pixelsCount.setText(updateCCT.getProperties().get(ComponentProperty.SIZE) + "");
    }

    private void filterImage() {

        if (shapeTree == null || cct == null) {
            return;
        }
        boolean similar = false;
        if (radioShapeThree.isSelected()) {
            painter.filterShapeTreeImage(shapeTree, keepOnlyOne, similar, 0, false);
        } else {
            painter.filterCCTImage(cct, keepOnlyOne, similar, false);
        }
    }

    private void searchFor(double minX, double minY, double maxX, double maxY) {

        filterProperties.put(FilterProps.LEFT, Double.valueOf(minY).intValue());
        filterProperties.put(FilterProps.RIGHT, Double.valueOf(maxY).intValue() - 1);
        filterProperties.put(FilterProps.UP, Double.valueOf(minX).intValue());
        filterProperties.put(FilterProps.BOTTOM, Double.valueOf(maxX).intValue() - 1);

        filterProperties.put(FilterProps.MAX, Integer.MAX_VALUE);
        filterProperties.put(FilterProps.MIN, Integer.MIN_VALUE);

        selectedFilters.put(ComponentProperty.LEFT, true);
        selectedFilters.put(ComponentProperty.RIGHT, true);
        selectedFilters.put(ComponentProperty.TOP, true);
        selectedFilters.put(ComponentProperty.BOTTOM, true);

        filterImage();
    }

}
